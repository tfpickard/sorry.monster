"""oops.ninja - Minimal instant mode apology service"""

import os
from typing import Any

import httpx
from fastapi import FastAPI, Form, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI(
    title="oops.ninja",
    version="1.0.0",
    description="Instant apology generation - I'm Feeling Lucky mode",
)

templates = Jinja2Templates(directory="templates")

# API backend URL
API_URL = os.getenv("API_URL", "http://sorry_api:8083")


@app.get("/", response_class=HTMLResponse)
async def index(request: Request) -> Any:
    """Landing page with minimal form"""
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/lucky")
async def lucky(
    summary: str = Form(...),
    what: str = Form(...),
    harm: str = Form(...),
    severity: str = Form(default="medium"),
) -> dict[str, Any]:
    """I'm Feeling Lucky - instant apology generation

    Auto-interprets and generates with sane defaults.
    Returns twitter and customer_email drafts only.
    """
    # Build request with sane defaults
    payload = {
        "mode": "generate",
        "incident": {
            "summary": summary,
            "who": ["customers"],
            "what": what,
            "when": "unknown",
            "harm": harm,
            "stakeholders": ["customers"],
            "severity": severity,
            "jurisdictions": [],
            "evidence": [],
        },
        "sliders": {
            "contrition": 65,
            "legal_hedging": 30,
            "memes": 10,
            "accountability_evasion": 0,
            "profit_alchemist": 0,
            "risk_transfer": 0,
            "data_fog": 0,
            "pseudo_transparency": 0,
        },
        "strategy": {
            "scapegoat": {"type": None, "intensity": 0},
            "distraction": {"type": None, "intensity": 0},
            "responsibility_split": {"brand": 0.5, "external": 0.5},
            "victimless_frame": False,
            "self_credentialing": [],
        },
        "tone": "earnest",
        "channels": ["twitter", "customer_email"],
        "brand_profile": None,
        "locale": "en-US",
    }

    # Call main API
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_URL}/v1/generate", json=payload, timeout=60.0)
            response.raise_for_status()
            result = response.json()

            # Return simplified response
            return {
                "twitter": {
                    "useful": result["drafts"]["twitter"]["useful"],
                    "pointless": result["drafts"]["twitter"]["pointless"],
                },
                "customer_email": {
                    "useful": result["drafts"]["customer_email"]["useful"],
                    "pointless": result["drafts"]["customer_email"]["pointless"],
                },
                "risk": {
                    "pr_risk": result["metrics"]["pr_risk"],
                    "sincerity": result["metrics"]["sincerity_score"],
                },
                "watermark": "Generated by oops.ninja",
            }
    except httpx.HTTPError as e:
        raise HTTPException(status_code=500, detail=f"API error: {str(e)}")


@app.get("/health")
async def health() -> dict[str, str]:
    """Health check"""
    return {"status": "healthy", "service": "oops.ninja"}
